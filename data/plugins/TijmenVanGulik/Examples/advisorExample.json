{"id":"tijmenvangulik.advisorExample","name":"Power curve advisor example","description":"","version":"1.0","author":"Tijmen van Gulik","url":"plugins/TijmenVanGulik/Examples/languageExample.json","script":"var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar tijmenvangulik_powercurveadvisorexample;\r\n(function (tijmenvangulik_powercurveadvisorexample) {\r\n    var PowerCurveAdvisorExample = (function (_super) {\r\n        __extends(PowerCurveAdvisorExample, _super);\r\n        function PowerCurveAdvisorExample(controller) {\r\n            _super.call(this, controller);\r\n            this.caption = \"Power curve example advisor\";\r\n            this.defaultWidth = 2;\r\n        }\r\n        PowerCurveAdvisorExample.prototype.calcDiffs = function (data) {\r\n            //here you can do more data processing or do a completaly differn procesing \r\n            _super.prototype.calcDiffs.call(this, data);\r\n        };\r\n        PowerCurveAdvisorExample.prototype.makeAdvice = function () {\r\n            //you can also use the curve data to make an advice _curveData\r\n            var advice = \"\";\r\n            var msg = local.current();\r\n            //max diff is the greatest difference (negative is less positive is to much)\r\n            if (Math.abs(this._maxDiff) >= this._giveAdviceAt) {\r\n                if (this._maxDiff < 0) {\r\n                    if (this._maxDiffPart == ergometerWidgets.StrokeParts.PART_LEGS) {\r\n                        //not enough legs\r\n                        advice = msg.advisor_moreLegsAtStart;\r\n                    }\r\n                    else if (this._maxDiffPart == ergometerWidgets.StrokeParts.PART_TRUNK) {\r\n                        //not enough trunk\r\n                        advice = msg.advisor_moreTrunkAfterLegs;\r\n                    }\r\n                    else if (this._maxDiffPart == ergometerWidgets.StrokeParts.PART_ARMS) {\r\n                        //not enough arms\r\n                        //when trunk is also low then advice also about the trunk,\r\n                        //because it is often an combination of these forces\r\n                        if (this._trunkDiff < 0) {\r\n                            advice = msg.advisor_more_trunk_and_arms_after_legs;\r\n                        }\r\n                        else\r\n                            advice = msg.advisor_moreArmsAfterTrunk;\r\n                    }\r\n                }\r\n                else if (this._maxDiff > 0) {\r\n                    //to much of somthing often means there is not enough in another part or\r\n                    //force the different parts is combined\r\n                    if (this._maxDiffPart == ergometerWidgets.StrokeParts.PART_LEGS) {\r\n                        //much legs but trunk and arms are both not enough\r\n                        if (this._trunkDiff < this._armsDiff)\r\n                            advice = msg.advisor_postpone_trunk; //the trunk part has the most les force, so blame the\r\n                        else if (this._trunkDiff > this._armsDiff)\r\n                            advice = msg.advisor_postpone_arms;\r\n                        else {\r\n                            //it makes no sence to say that we should use less legs\r\n                            //may be be force was all in the beginning,\r\n                            advice = msg.advisor_more_trunk_and_arms_after_legs;\r\n                        }\r\n                    }\r\n                    else if (this._maxDiffPart == ergometerWidgets.StrokeParts.PART_TRUNK) {\r\n                        //this should not hapen often becausee this is the highest point in the curve and\r\n                        //the curve is mapped arround the highest curve point.\r\n                        //in this case the curve is more round on the top than configured, this is not\r\n                        //allways a bad curve, but it reduces the peek force.\r\n                        //maybe the the arms and the legs delivery too much in the\r\n                        if (this._armsDiff < 0 && this._armsDiff < this._legsDiff) {\r\n                            //when not much arms then advice to delay the arms so it will not be counted during the\r\n                            //trunk part\r\n                            advice = msg.advisor_postpone_arms;\r\n                        }\r\n                        else if (this._legsDiff < 0) {\r\n                            //when not much legs then advice to accelrate the legs force, this\r\n                            //should increase the legs peek force and make the curve less round\r\n                            advice = msg.advisor_accelerate_legs;\r\n                        }\r\n                        else {\r\n                            //not yet defined what to advice here\r\n                            advice = msg.advisor_use_more_trunk;\r\n                        }\r\n                    }\r\n                    else if (this._maxDiffPart == ergometerWidgets.StrokeParts.PART_ARMS) {\r\n                        //too much force at the end\r\n                        //when the trunk has not much force then the force of the trunk is too much at the\r\n                        //at the same time as the legs\r\n                        // when both legs and arms are low\r\n                        if (this._legsDiff < 0 && this._legsDiff < this._trunkDiff) {\r\n                            //more leg force to make compensate for the arm force\r\n                            advice = msg.advisor_accelerate_legs;\r\n                        }\r\n                        else if (this._trunkDiff < 0) {\r\n                            //there is less trunk so the trunk may be used during the arms because this is to high\r\n                            advice = msg.advisor_trunk_earlier;\r\n                        }\r\n                        else\r\n                            advice = msg.advisor_less_arms; //too much arm force (rowing is more about leg force)\r\n                    }\r\n                }\r\n                else\r\n                    advice = msg.advisor_greate_stroke;\r\n            }\r\n            else\r\n                advice = msg.advisor_greate_stroke;\r\n            return advice;\r\n        };\r\n        PowerCurveAdvisorExample.prototype.initControl = function () {\r\n            _super.prototype.initControl.call(this);\r\n            this.labelText = \"AdviceExample\";\r\n        };\r\n        return PowerCurveAdvisorExample;\r\n    })(ergometerWidgets.PowerCurveAdvisor);\r\n    tijmenvangulik_powercurveadvisorexample.PowerCurveAdvisorExample = PowerCurveAdvisorExample;\r\n    /*------------------------------------------------------------------------------\r\n        Create and remove the widgets in the Plugin\r\n    ------------------------------------------------------------------------------*/\r\n    var ExamplePlugin = (function (_super) {\r\n        __extends(ExamplePlugin, _super);\r\n        function ExamplePlugin() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        ExamplePlugin.prototype.init = function () {\r\n            //create the widget(s) on create\r\n            dashboard.widgetRegistry().register(PowerCurveAdvisorExample, 'tijmenvangulik_examples_PowerCurveAdvisorExample', 'Advisor', ['Examples']);\r\n        };\r\n        ExamplePlugin.prototype.remove = function () {\r\n            //remove the widgets when the plugin is removed\r\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_PowerCurveAdvisorExample');\r\n        };\r\n        return ExamplePlugin;\r\n    })(ExternalPlugin);\r\n    var plugin;\r\n    plugin = new ExamplePlugin();\r\n})(tijmenvangulik_powercurveadvisorexample || (tijmenvangulik_powercurveadvisorexample = {}));\r\n","styles":"","typeScript":"module tijmenvangulik_powercurveadvisorexample {\n    export class PowerCurveAdvisorExample  extends ergometerWidgets.PowerCurveAdvisor {\n        \n        public calcDiffs(data:ergometerWidgets.PowerCurveChangedInfo) {\n            //here you can do more data processing or do a completaly differn procesing \n            super.calcDiffs(data);\n            \n        }\n        public makeAdvice() : string {\n            //you can also use the curve data to make an advice _curveData\n            var advice : string =\"\";\n            var msg =  local.current();\n            //max diff is the greatest difference (negative is less positive is to much)\n            if ( Math.abs(this._maxDiff)>=this._giveAdviceAt) {\n                if (this._maxDiff<0) {\n                    if (this._maxDiffPart==ergometerWidgets.StrokeParts.PART_LEGS) {\n                        //not enough legs\n                        advice=msg.advisor_moreLegsAtStart\n                    }\n                    else if (this._maxDiffPart==ergometerWidgets.StrokeParts.PART_TRUNK) {\n                        //not enough trunk\n                        advice=msg.advisor_moreTrunkAfterLegs\n                    }\n                    else if (this._maxDiffPart==ergometerWidgets.StrokeParts.PART_ARMS) {\n                        //not enough arms\n                        //when trunk is also low then advice also about the trunk,\n                        //because it is often an combination of these forces\n                        if (this._trunkDiff<0) {\n                            advice=msg.advisor_more_trunk_and_arms_after_legs\n                        }\n                        else advice=msg.advisor_moreArmsAfterTrunk\n                    }\n\n                }\n                else if (this._maxDiff>0) {\n                    //to much of somthing often means there is not enough in another part or\n                    //force the different parts is combined\n                    if (this._maxDiffPart==ergometerWidgets.StrokeParts.PART_LEGS) {\n                        //much legs but trunk and arms are both not enough\n                        if (this._trunkDiff<this._armsDiff)\n                            advice=msg.advisor_postpone_trunk  //the trunk part has the most les force, so blame the\n                        else  if (this._trunkDiff>this._armsDiff)  //arms have most less force, blame the arms\n                            advice=msg.advisor_postpone_arms;\n                        else {\n                            //it makes no sence to say that we should use less legs\n                            //may be be force was all in the beginning,\n                            advice=msg.advisor_more_trunk_and_arms_after_legs;\n                        }\n                    }\n                    else if (this._maxDiffPart==ergometerWidgets.StrokeParts.PART_TRUNK) {\n                        //this should not hapen often becausee this is the highest point in the curve and\n                        //the curve is mapped arround the highest curve point.\n                        //in this case the curve is more round on the top than configured, this is not\n                        //allways a bad curve, but it reduces the peek force.\n                        //maybe the the arms and the legs delivery too much in the\n\n                        if (this._armsDiff<0 && this._armsDiff<this._legsDiff ) {\n                            //when not much arms then advice to delay the arms so it will not be counted during the\n                            //trunk part\n                            advice=msg.advisor_postpone_arms;\n                        }\n                        else if (this._legsDiff<0) {\n                            //when not much legs then advice to accelrate the legs force, this\n                            //should increase the legs peek force and make the curve less round\n                            advice=msg.advisor_accelerate_legs;\n                        }\n                        else {\n                            //not yet defined what to advice here\n                            advice=msg.advisor_use_more_trunk;\n                        }\n                    }\n                    else if (this._maxDiffPart==ergometerWidgets.StrokeParts.PART_ARMS) {\n                        //too much force at the end\n                        //when the trunk has not much force then the force of the trunk is too much at the\n                        //at the same time as the legs\n\n                        // when both legs and arms are low\n                        if (this._legsDiff<0 && this._legsDiff<this._trunkDiff ) {\n                            //more leg force to make compensate for the arm force\n                            advice=msg.advisor_accelerate_legs;\n                        }\n                        else if (this._trunkDiff<0) {\n                            //there is less trunk so the trunk may be used during the arms because this is to high\n                            advice=msg.advisor_trunk_earlier;\n                        }\n                        else advice=msg.advisor_less_arms;//too much arm force (rowing is more about leg force)\n                    }\n                }\n                else advice=msg.advisor_greate_stroke;\n            }\n            else advice=msg.advisor_greate_stroke;\n\n            return advice;\n        }\n        public initControl() {\n            super.initControl();\n            this.labelText = \"AdviceExample\";\n        }\n        constructor (controller : dashboard.Controller) {\n            super(controller);\n            this.caption = \"Power curve example advisor\";\n            this.defaultWidth=2;\n        }\n    }\n\n/*------------------------------------------------------------------------------\n    Create and remove the widgets in the Plugin\n------------------------------------------------------------------------------*/\n    class ExamplePlugin extends ExternalPlugin {\n        \n    \n        \n        public init() {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(PowerCurveAdvisorExample,'tijmenvangulik_examples_PowerCurveAdvisorExample','Advisor',['Examples']);\n        }\n        public remove() {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_PowerCurveAdvisorExample');\n        }               \n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n    \n}","html":""}