{"id":"tijmenvangulik_examples_racewidgets","name":"Example race widgets","description":"","version":"1.0","author":"Tijmen van Gulik","url":"plugins/TijmenVanGulik/Examples/RaceWidgets.json","script":"var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar tijmenvangulik_examples_RaceWidgets;\r\n(function (tijmenvangulik_examples_RaceWidgets) {\r\n    /*------------------------------------------------------------------------------\r\n        Simple Chart gauge widget example\r\n    ------------------------------------------------------------------------------*/\r\n    var ExampleRaceTrackWidget = (function (_super) {\r\n        __extends(ExampleRaceTrackWidget, _super);\r\n        function ExampleRaceTrackWidget(controller) {\r\n            this._trainingDistance = 0;\r\n            this._workDistance = 0;\r\n            this._updateDelay = 1000 / 20; //20 frames per second\r\n            this._animating = false;\r\n            this._waitingForTimeout = false;\r\n            this._speed = 0;\r\n            this._finished = false;\r\n            this.caption = \"Race widget example\";\r\n            _super.call(this, controller);\r\n        }\r\n        ExampleRaceTrackWidget.prototype.resize = function () {\r\n            _super.prototype.resize.call(this);\r\n            this.paint();\r\n        };\r\n        ExampleRaceTrackWidget.prototype.strokeDataUpdate = function (strokeData) {\r\n            this._workDistance = strokeData.distance;\r\n            this._speed = strokeData.speed;\r\n            this._lastUpdateTime = new Date().getTime();\r\n            if (!this._finished && this._speed && this._speed > 0) {\r\n                if (!this._animating) {\r\n                    this._animating = true;\r\n                    this.doAnimation();\r\n                }\r\n            }\r\n            else\r\n                this._animating = false;\r\n        };\r\n        ExampleRaceTrackWidget.prototype.trainingDataUpdate = function (trainingData) {\r\n            if (this._trainingDistance != trainingData.distance) {\r\n                this._trainingDistance = trainingData.distance;\r\n                //get a new high score for the training distance\r\n                this.paint();\r\n            }\r\n            this._finished = (trainingData.endDistance > 0 && trainingData.endDuration > 0);\r\n            if (this._finished) {\r\n                this._speed = 0;\r\n                this._animating = false;\r\n            }\r\n        };\r\n        ExampleRaceTrackWidget.prototype.loaded = function () {\r\n            _super.prototype.loaded.call(this);\r\n            pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\r\n            pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\r\n        };\r\n        ExampleRaceTrackWidget.prototype.beforeUnload = function () {\r\n            _super.prototype.beforeUnload.call(this);\r\n            pm3.monitor.pubsubs.unsubStrokeDataUpdate(this.strokeDataUpdate);\r\n            pm3.monitor.pubsubs.unsubTrainingDataUpdate(this.trainingDataUpdate);\r\n        };\r\n        ExampleRaceTrackWidget.prototype.paint = function () {\r\n            if (this.isLoaded) {\r\n                var canvas = this.canvas;\r\n                var context = canvas.getContext(\"2d\");\r\n                //clean background \r\n                context.lineWidth = 4;\r\n                context.strokeStyle = \"#4572A7\";\r\n                context.fillStyle = \"#FFFFFF\";\r\n                context.rect(0, 0, canvas.width, canvas.height);\r\n                context.fill();\r\n                var radius = 25;\r\n                var radiusx = radius;\r\n                var circleOffsetY = 20;\r\n                var width = canvas.width - radiusx * 2;\r\n                //var maxDistance= rower.trainingDistance;\r\n                context.fillStyle = \"#CCCCCC\";\r\n                context.strokeStyle = \"#CCCCCC\";\r\n                var currentTime = new Date().getTime();\r\n                var timeSinceLastUpdate = 0;\r\n                if (this._lastUpdateTime) {\r\n                    timeSinceLastUpdate = currentTime - this._lastUpdateTime;\r\n                }\r\n                var extrapolatedDistance = 0;\r\n                if (this._speed && !this._finished) {\r\n                    extrapolatedDistance = (this._speed * (timeSinceLastUpdate / 1000));\r\n                }\r\n                var relativePosition = width * ((this._workDistance + extrapolatedDistance) / this._trainingDistance);\r\n                var ellipseX = relativePosition + radiusx;\r\n                var ellipseY = radius + circleOffsetY;\r\n                utilities.ellipse(context, ellipseX, ellipseY, radiusx, radius);\r\n                context.fill();\r\n            }\r\n        };\r\n        ExampleRaceTrackWidget.prototype.doAnimation = function () {\r\n            var _this = this;\r\n            if (this.isLoaded && this._animating) {\r\n                this.paint();\r\n                if (this._animating && !this._waitingForTimeout) {\r\n                    this._waitingForTimeout = true;\r\n                    //use animation frames\r\n                    utilities.requestTimeout(function () {\r\n                        _this._waitingForTimeout = false;\r\n                        _this.doAnimation();\r\n                    }, this._updateDelay);\r\n                }\r\n            }\r\n        };\r\n        return ExampleRaceTrackWidget;\r\n    })(ergometerWidgets.CanvasWidget);\r\n    /*------------------------------------------------------------------------------\r\n        Create and remove the widgets in the Plugin\r\n    ------------------------------------------------------------------------------*/\r\n    var ExamplePlugin = (function (_super) {\r\n        __extends(ExamplePlugin, _super);\r\n        function ExamplePlugin() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        ExamplePlugin.prototype.init = function () {\r\n            //create the widget(s) on create\r\n            dashboard.widgetRegistry().register(ExampleRaceTrackWidget, 'tijmenvangulik_examples_RaceWidgetExample', 'Race', ['Examples']);\r\n        };\r\n        ExamplePlugin.prototype.remove = function () {\r\n            //remove the widgets when the plugin is removed\r\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_RaceWidgetExample');\r\n        };\r\n        return ExamplePlugin;\r\n    })(ExternalPlugin);\r\n    var plugin;\r\n    plugin = new ExamplePlugin();\r\n})(tijmenvangulik_examples_RaceWidgets || (tijmenvangulik_examples_RaceWidgets = {}));\r\n","styles":"","typeScript":"module tijmenvangulik_examples_RaceWidgets { //make a name space to prevent mix ups\n\n/*------------------------------------------------------------------------------\n    Simple Chart gauge widget example\n------------------------------------------------------------------------------*/\n \n    class ExampleRaceTrackWidget  extends ergometerWidgets.CanvasWidget {\n        private _trainingDistance : number;\n        private _workDistance : number;\n        private _updateDelay : number; \n        private _animating : boolean;\n        private _waitingForTimeout : boolean;\n        private _speed : number;\n        private _lastUpdateTime : number;\n        private _finished;\n        \n        public resize() {\n\t\t\tsuper.resize();\n\t\t\tthis.paint();\n\t\t\t\n\t\t}\n\t\t\n        public strokeDataUpdate(strokeData : pm3.StrokeData) {\n            this._workDistance = strokeData.distance;\n            \n            this._speed=strokeData.speed;\n            this._lastUpdateTime = new Date().getTime();\n            if (!this._finished && this._speed && this._speed>0) {\n                if (!this._animating) {\n                    this._animating=true;\n                    this.doAnimation();\n                }\n            }\n            else this._animating=false;\n            \n        }\n        \n        public trainingDataUpdate(trainingData : pm3.TrainingData) {\n            if (this._trainingDistance!=trainingData.distance) {\n\t\t\t\tthis._trainingDistance=trainingData.distance;\n                //get a new high score for the training distance\n                this.paint();\n\t\t\t}\n\t\t\tthis._finished=  (trainingData.endDistance>0 && trainingData.endDuration>0);\n\t\t\tif (this._finished) {\n\t\t\t    this._speed=0;\n\t\t\t    this._animating=false;\n\t\t\t}\n        }\n        public loaded() {\n          super.loaded();\n          pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\n\t      pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\n        }\n        public beforeUnload() {\n          super.beforeUnload();\n          pm3.monitor.pubsubs.unsubStrokeDataUpdate(this.strokeDataUpdate);\n\t      pm3.monitor.pubsubs.unsubTrainingDataUpdate(this.trainingDataUpdate);\n        }\n\t    \n\t    public paint() {\n\t        if (this.isLoaded) {\n\t        \t\n\t        \tvar canvas= this.canvas;\n\t\t        var context=canvas.getContext(\"2d\");\n                \n                //clean background \n\t\t        context.lineWidth=4;\n\t\t\t\tcontext.strokeStyle=\"#4572A7\"\n\t\t        context.fillStyle=\"#FFFFFF\";\n\t\t        context.rect(0,0,canvas.width,canvas.height);\n\t\t        context.fill();\n\t\t        \n                var radius = 25;\n                var radiusx = radius;\n                var circleOffsetY =20;\n                var width = canvas.width-radiusx*2;\n\t\t\t\t//var maxDistance= rower.trainingDistance;\n\t\t\t\tcontext.fillStyle=\"#CCCCCC\";\n                context.strokeStyle=\"#CCCCCC\";\n                var currentTime = new Date().getTime();\n                var timeSinceLastUpdate : number =0;\n                if (this._lastUpdateTime){\n                    timeSinceLastUpdate = currentTime- this._lastUpdateTime;\n                }\n                var extrapolatedDistance=0;\n                if (this._speed && !this._finished) {\n                    extrapolatedDistance= (this._speed* (timeSinceLastUpdate/1000));  \n                }\n                \n                \n\t\t\t\tvar relativePosition = width * ((this._workDistance+extrapolatedDistance)/ this._trainingDistance) ;\n\t\t\t\tvar ellipseX =  relativePosition+radiusx;\n                var ellipseY = radius+circleOffsetY;\n                utilities.ellipse(context,\n                    ellipseX,ellipseY,\n                    radiusx, radius\n                );\n                context.fill();\n\t            \n\t        }\n        }\n        \n        public doAnimation() {\n            \n            if (this.isLoaded && this._animating) {\n                this.paint();\n                if (this._animating && !this._waitingForTimeout) {\n                    this._waitingForTimeout = true;\n                    //use animation frames\n                    utilities.requestTimeout(\n                        () => {\n                            this._waitingForTimeout = false;\n                            this.doAnimation();\n                        },this._updateDelay);\n                }\n            }\n        }\n        constructor (controller : dashboard.Controller) {\n            this._trainingDistance=0;\n            this._workDistance=0;\n            this._updateDelay = 1000/20; //20 frames per second\n            this._animating =false;\n            this._waitingForTimeout =false;\n            this._speed=0;\n            this._finished=false;\n\t\t\tthis.caption = \"Race widget example\";\n\t\t\tsuper(controller);\n\t\t}\n        \n\t}\n/*------------------------------------------------------------------------------\n    Create and remove the widgets in the Plugin\n------------------------------------------------------------------------------*/\n    class ExamplePlugin extends ExternalPlugin {\n        \n        public raceTrackWidget : ExampleRaceTrackWidget;\n\n        \n        public init() {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(ExampleRaceTrackWidget,'tijmenvangulik_examples_RaceWidgetExample','Race',['Examples']);\n        }\n        public remove() {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_RaceWidgetExample');\n        }               \n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n    \n}\n","html":""}